// Generated by CoffeeScript 1.6.3
var PROGRAM, baseFileName, checkDirs, copyStaticFile, copyStaticFiles, error, fixContents, fixHref, fixLinks, fs, generateHeader, generateTrailer, getFiles, help, highlight, initMarked, log, marked, out, path, readFile, runHighlight, shelljs, _;

fs = require("fs");

path = require("path");

_ = require("underscore");

marked = require("marked");

shelljs = require("shelljs");

highlight = require("highlight.js");

PROGRAM = (path.basename(__filename)).split(/\./g)[0];

exports.run = function(iDir, oDir) {
  var contents, err, fileName, files, html, oFile, title, _i, _len, _ref;
  if (!iDir && !oDir) {
    help();
  }
  checkDirs(iDir, oDir);
  log("reading source doc from: " + iDir);
  log("generating doc into:     " + oDir);
  files = getFiles(iDir);
  copyStaticFiles(oDir);
  files = getFiles(iDir);
  initMarked();
  html = [];
  for (_i = 0, _len = files.length; _i < _len; _i++) {
    _ref = files[_i], title = _ref.title, fileName = _ref.fileName, contents = _ref.contents;
    log("processing: " + title + ": " + fileName);
    try {
      contents = marked(contents);
    } catch (_error) {
      err = _error;
      error("error processing markdown in " + fileName + ": " + err);
    }
    contents = fixContents(title, fileName, contents);
    html.push(contents);
  }
  generateHeader();
  html.unshift("");
  html.push("");
  out(html.join("\n"));
  generateTrailer();
  oFile = path.join(oDir, "index.html");
  try {
    fs.writeFile(oFile, out.text);
  } catch (_error) {
    err = _error;
    error("error generating output file '" + oFile + "': " + err);
  }
};

runHighlight = function(code, lang) {
  var e, err, result;
  err = void 0;
  result = {};
  try {
    if (lang) {
      result = highlight.highlight(lang, code);
    } else {
      result = highlight.highlightAuto(code);
    }
  } catch (_error) {
    e = _error;
    throw Error("error running highlight: " + e);
  }
  return result.value;
};

initMarked = function() {
  marked.setOptions({
    highlight: runHighlight,
    tables: true,
    breaks: false,
    pedantic: false,
    sanitize: false,
    smartLists: true,
    smartypants: false
  });
};

getFiles = function(iDir) {
  var contents, fileName, line, lines, match, result, title, _i, _len;
  iDir = path.join(iDir, "doc", "api");
  fileName = path.join(iDir, "_toc.markdown");
  contents = readFile(fileName);
  lines = contents.split("\n");
  result = [];
  for (_i = 0, _len = lines.length; _i < _len; _i++) {
    line = lines[_i];
    match = line.match(/\*\s+\[(.*?)\]\((.*)\).*/);
    if (match == null) {
      continue;
    }
    title = match[1];
    fileName = match[2];
    fileName = "" + (baseFileName(fileName)) + ".markdown";
    fileName = path.join(iDir, fileName);
    contents = readFile(fileName);
    result.push({
      title: title,
      fileName: fileName,
      contents: contents
    });
  }
  return result;
};

fixContents = function(title, fileName, contents) {
  var id;
  id = "" + (baseFileName(fileName)) + ".html";
  contents = "<div id='" + id + "'></div>\n" + contents;
  contents = "\n<!-- ======================================= -->\n" + contents;
  contents = fixLinks(contents);
  return contents;
};

fixLinks = function(contents) {
  var fixedHref, match, pattern, result;
  result = [];
  pattern = /([\s\S]*?)<a\s+(.*?)href="(.*?)"([\s\S]*)/;
  while (true) {
    match = contents.match(pattern);
    if (!match) {
      break;
    }
    fixedHref = fixHref(match[3]);
    result.push(match[1]);
    result.push("<a ");
    result.push(match[2]);
    result.push("href='");
    result.push(fixedHref);
    result.push("'");
    contents = match[4];
  }
  result.push(contents);
  return result.join("");
};

fixHref = function(href) {
  var match;
  if (href.match(/^#.*/)) {
    return href;
  }
  if (href.match(/^(http:)|(https:)/)) {
    return href;
  }
  match = href.match(/.+?(#.*)/);
  if (match) {
    log("    fixRef: replacing " + href + " with " + match[1]);
    return match[1];
  }
  log("    fixRef: replacing " + href + " with #" + href);
  return "#" + href;
};

readFile = function(fileName) {
  var err;
  try {
    return fs.readFileSync(fileName, "utf8");
  } catch (_error) {
    err = _error;
    error("error reading file '" + fileName + "': " + err);
  }
};

copyStaticFiles = function(oDir) {
  var iDir;
  iDir = path.join(__dirname, "static");
  copyStaticFile(iDir, "bootstrap-theme.min.css", oDir);
  copyStaticFile(iDir, "bootstrap.min.css", oDir);
  copyStaticFile(iDir, "bootstrap.min.js", oDir);
  copyStaticFile(iDir, "jquery.min.js", oDir);
  copyStaticFile(iDir, "highlight-default.css", oDir);
  return copyStaticFile(iDir, "node-favicon.png", oDir);
};

baseFileName = function(fileName) {
  fileName = path.basename(fileName);
  fileName = fileName.split(".")[0];
  return fileName;
};

copyStaticFile = function(iDir, fileName, oDir) {
  return shelljs.cp(path.join(iDir, fileName), oDir);
};

checkDirs = function(iDir, oDir) {
  var err, stats;
  if (!fs.existsSync(iDir)) {
    error("input directory '" + iDir + "' does not exist");
  }
  stats = fs.statSync(iDir);
  if (!stats.isDirectory()) {
    error("input directory '" + iDir + "' is not a directory");
  }
  if (!fs.existsSync(oDir)) {
    try {
      fs.mkdirSync(oDir);
    } catch (_error) {
      err = _error;
      error("unable to create output directory '" + oDir + "': " + err);
    }
  }
  stats = fs.statSync(oDir);
  if (!stats.isDirectory()) {
    return error("output directory '" + oDir + "' is not a directory");
  }
};

generateHeader = function() {
  out("<!doctype html>\n<html>\n    <head>\n        <title>node.js</title>\n        <link rel=\"icon\" href=\"node-favicon.png\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">    \n        <link rel=\"stylesheet\" href=\"bootstrap.min.css\">\n        <link rel=\"stylesheet\" href=\"bootstrap-theme.min.css\">\n        <link rel=\"stylesheet\" href=\"highlight-default.css\">\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-md-12\">");
};

generateTrailer = function() {
  out("                </div>\n            </div>\n        </div>\n        <script src=\"jquery.min.js\"></script>    \n        <script src=\"bootstrap.min.js\"></script>    \n    </body>\n</html>");
};

out = function(text) {
  if (out.text == null) {
    out.text = "";
  }
  out.text += text;
};

log = function(message) {
  return console.error("" + PROGRAM + ": " + message);
};

error = function(message) {
  log(message);
  return process.exit(1);
};

help = function() {
  console.error("" + PROGRAM + " <node-src-dir> <out-dir>\n\ndoes the following:\n\n- read node doc source from <node-src-dir>\n- generate output doc in    <out-dir>");
  return process.exit(1);
};

if (require.main === module) {
  exports.run(process.argv[2], process.argv[3]);
}
